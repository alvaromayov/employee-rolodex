{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","person","id","alt","name","email","CardList","persons","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredpersons","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAYeA,G,YARK,SAAAC,GAAK,OACtB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,OAAOC,GAAvC,0BAAmEC,IAAI,KAC/E,6BAAKL,EAAMG,OAAOG,OAClB,4BAAIN,EAAMG,OAAOI,aCHXC,G,MAAW,SAAAR,GAAK,OAEzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,QAAQC,KAAI,SAAAP,GAAM,OACrB,cAAC,EAAD,CAAsBA,OAAQA,GAAnBA,EAAOC,WCLjBO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCHG,E,kDArCb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXb,QAAS,GACTU,YAAa,IALH,E,gEASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,QAASkB,S,+BAOlC,IAAD,EAC0BC,KAAKN,MAA9Bb,EADD,EACCA,QAASU,EADV,EACUA,YACXU,EAAkBpB,EAAQqB,QAAO,SAAA3B,GAAM,OAC3CA,EAAOG,KAAKyB,cAAcC,SAASb,EAAYc,wBAEjD,OACE,sBAAKhC,UAAU,MAAf,UACE,cAAC,EAAD,CACIW,YAAY,gBACZC,aAAce,KAAKf,eAErB,kDACF,cAAC,EAAD,CAAUJ,QAASoB,W,GAjCTK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.86b62955.chunk.js","sourcesContent":["import React from 'react';\n\nimport \"./card.css\";\n\nexport const Card = props => (\n   <div className=\"card-container\">\n       <img src={`https://robohash.org/${props.person.id}?set=set2&size=180x180`} alt=\"\"/>\n       <h2>{props.person.name}</h2>\n       <p>{props.person.email}</p>\n   </div>\n)\n\nexport default Card;","import React from 'react';\n\nimport Card from '../card/card';\nimport \"./card-list.css\";\n\nexport const CardList = props => (\n    \n    <div className=\"card-list\">\n        {props.persons.map(person => (\n            <Card key={person.id} person={person} />\n        ))}\n    </div>\n\n)\n\nexport default CardList;","import React from 'react';\n\nimport './search-box.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n) ","import './App.css';\nimport React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list';\nimport { SearchBox } from './components/search-box/search-box';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      persons: [],\n      searchField: \"\"\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ persons: users }))\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { persons, searchField } = this.state;\n    const filteredpersons = persons.filter(person =>\n      person.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <SearchBox\n            placeholder=\"Search person\"\n            handleChange={this.handleChange}\n          />\n          <h1>Employee Rolodex</h1>\n        <CardList persons={filteredpersons} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}